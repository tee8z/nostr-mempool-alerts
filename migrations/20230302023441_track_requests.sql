CREATE TABLE alert_types(
    id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1000 INCREMENT BY 1),
    val TEXT NOT NULL UNIQUE,
    PRIMARY KEY(id)
);

/*
 * 1) CONFIRM_HEIGHT - transaction confirmation height (need height)
 * 2) FEE_LEVEL - mempool fee hitting a given threshold (need fee value in vbytes)
 * 3) BLOCK_HEIGHT - a given block height has been reached (need height)
*  4) UTXO_MOVEMENT - utxo movement (need actual utxo to watch)
*/
INSERT INTO alert_types(val)
VALUES
    ('CONFIRM_HEIGHT'),
    ('FEE_LEVEL'),
    ('BLOCK_HEIGHT'),
    ('UTXO_MOVEMENT');


CREATE TABLE alerts(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 50000 INCREMENT BY 1),
    alert_type_id INT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
    matched_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
    requestor_pk TEXT NOT NULL, --nostr public key of the individual asking for the alert to be sent to them
    threshold_num BIGINT, -- block height, fee, & confirm count go here
    block_state JSONB,
    nostr_config JSONB, -- store the relays the user would like the message to go over
    event_data_identifier TEXT, -- UTXO would go here
    PRIMARY KEY(id),
    CONSTRAINT fk_request_type
      FOREIGN KEY(alert_type_id) 
	  REFERENCES alert_types(id)
);
CREATE UNIQUE INDEX alert_requestor_pk_active_type_idx on alerts (alert_type_id, active, requestor_pk);
CREATE INDEX alert_active on alerts(active);

CREATE TABLE notifications(
    id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 70000 INCREMENT BY 1),
    alert_id BIGINT NOT NULL UNIQUE, -- might not want this to be unique?
    sent_at TIMESTAMPTZ NOT NULL DEFAULT (NOW() AT TIME ZONE 'utc'),
    sent_message TEXT NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_alert_data
      FOREIGN KEY(alert_id) 
	  REFERENCES alerts(id)
);
